def func2(arg16, arg17):
    var43 = func3(arg17, arg16)
    var48 = func7(var43, arg16)
    result = (arg16 ^ (arg16 ^ 1995750568) & ((arg16 + (((arg16 | (var48 | -293)) | var48) + -196567502) + var48) ^ -999516652)) | arg17
    return result
def func7(arg44, arg45):
    var46 = 0
    for var47 in range(7):
        var46 += arg45 - -4
    return var46
def func3(arg18, arg19):
    var24 = func4(arg18, arg19)
    var27 = func5(var24, arg19)
    var32 = func6(arg19, var27)
    var33 = arg19 + (-593225779 + arg19) & var24
    var34 = (arg19 ^ (var27 ^ var24)) | var32
    var35 = var27 ^ ((var34 + var32) - -639204196)
    var36 = var24 & var33
    var37 = (var34 + var36 - var27) - arg18
    if var33 < var37:
        var38 = var35 & var33 ^ (var27 | arg19)
    else:
        var38 = var27 | var24
    var39 = var34 & var33
    var40 = (arg18 + -865513816 | var27) | var37
    var41 = var33 & var40 | arg19 - -262385707
    var42 = var27 ^ (arg18 | var36) - arg18
    result = (832 & ((var36 + var32 - (var32 | var37)) & (var36 + ((var39 ^ var37) + 1043199978) & var24)) & 348885198) - arg19
    return result
def func6(arg28, arg29):
    var30 = 0
    for var31 in range(19):
        if arg28 < var30:
            var30 += arg29 & var31
        else:
            var30 += arg28 ^ var30
    return var30
def func5(arg25, arg26):
    result = arg25 + arg25 | arg26
    return result
def func4(arg20, arg21):
    var22 = 0
    for var23 in xrange(29):
        var22 += 0 + (arg21 | -5)
    return var22
def func1(arg1, arg2):
    if arg1 < arg2:
        var3 = arg2 & arg1
    else:
        var3 = 14134537 + (1954012614 | 1026129378) | -777256032
    var4 = arg2 | arg2
    var5 = arg1 + -560
    var6 = arg1 | 128 ^ arg1 | var5
    var7 = arg1 & var6
    var8 = -1039248519 | var5 | 372739804 ^ var4
    var9 = (arg1 & var5) + var4
    var10 = var8 | arg1
    var11 = var5 - var4
    var12 = (-689 | var4 | var8) - var5
    var13 = (-462743406 - var10 | 850) + var4
    var14 = arg1 - (var11 & var12) + var4
    if var11 < var12:
        var15 = (520 + (var8 + var12)) + var8
    else:
        var15 = (var11 & -958) ^ var13 & var4
    result = ((var9 & var11) ^ var11 ^ (var12 + var4) | var8) + 379
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 16'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 49'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg16, arg17):
    var43 = func3(arg17, arg16)
    var48 = func7(var43, arg16)
    result = (arg16 ^ (arg16 ^ 1995750568) & ((arg16 + (((arg16 | (var48 | -293)) | var48) + -196567502) + var48) ^ -999516652)) | arg17
    return result
def func7(arg44, arg45):
    var46 = 0
    for var47 in range(7):
        var46 += arg45 - -4
    return var46
def func3(arg18, arg19):
    var24 = func4(arg18, arg19)
    var27 = func5(var24, arg19)
    var32 = func6(arg19, var27)
    var33 = arg19 + (-593225779 + arg19) & var24
    var34 = (arg19 ^ (var27 ^ var24)) | var32
    var35 = var27 ^ ((var34 + var32) - -639204196)
    var36 = var24 & var33
    var37 = (var34 + var36 - var27) - arg18
    if var33 < var37:
        var38 = var35 & var33 ^ (var27 | arg19)
    else:
        var38 = var27 | var24
    var39 = var34 & var33
    var40 = (arg18 + -865513816 | var27) | var37
    var41 = var33 & var40 | arg19 - -262385707
    var42 = var27 ^ (arg18 | var36) - arg18
    result = (832 & ((var36 + var32 - (var32 | var37)) & (var36 + ((var39 ^ var37) + 1043199978) & var24)) & 348885198) - arg19
    return result
def func6(arg28, arg29):
    var30 = 0
    for var31 in range(19):
        if arg28 < var30:
            var30 += arg29 & var31
        else:
            var30 += arg28 ^ var30
    return var30
def func5(arg25, arg26):
    result = arg25 + arg25 | arg26
    return result
def func4(arg20, arg21):
    var22 = 0
    for var23 in xrange(29):
        var22 += 0 + (arg21 | -5)
    return var22
def func1(arg1, arg2):
    if arg1 < arg2:
        var3 = arg2 & arg1
    else:
        var3 = 14134537 + (1954012614 | 1026129378) | -777256032
    var4 = arg2 | arg2
    var5 = arg1 + -560
    var6 = arg1 | 128 ^ arg1 | var5
    var7 = arg1 & var6
    var8 = -1039248519 | var5 | 372739804 ^ var4
    var9 = (arg1 & var5) + var4
    var10 = var8 | arg1
    var11 = var5 - var4
    var12 = (-689 | var4 | var8) - var5
    var13 = (-462743406 - var10 | 850) + var4
    var14 = arg1 - (var11 & var12) + var4
    if var11 < var12:
        var15 = (520 + (var8 + var12)) + var8
    else:
        var15 = (var11 & -958) ^ var13 & var4
    result = ((var9 & var11) ^ var11 ^ (var12 + var4) | var8) + 379
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 16'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 49'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg16, arg17):
    var43 = func3(arg17, arg16)
    var48 = func7(var43, arg16)
    result = (arg16 ^ (arg16 ^ 1995750568) & ((arg16 + (((arg16 | (var48 | -293)) | var48) + -196567502) + var48) ^ -999516652)) | arg17
    return result
def func7(arg44, arg45):
    var46 = 0
    for var47 in range(7):
        var46 += arg45 - -4
    return var46
def func3(arg18, arg19):
    var24 = func4(arg18, arg19)
    var27 = func5(var24, arg19)
    var32 = func6(arg19, var27)
    var33 = arg19 + (-593225779 + arg19) & var24
    var34 = (arg19 ^ (var27 ^ var24)) | var32
    var35 = var27 ^ ((var34 + var32) - -639204196)
    var36 = var24 & var33
    var37 = (var34 + var36 - var27) - arg18
    if var33 < var37:
        var38 = var35 & var33 ^ (var27 | arg19)
    else:
        var38 = var27 | var24
    var39 = var34 & var33
    var40 = (arg18 + -865513816 | var27) | var37
    var41 = var33 & var40 | arg19 - -262385707
    var42 = var27 ^ (arg18 | var36) - arg18
    result = (832 & ((var36 + var32 - (var32 | var37)) & (var36 + ((var39 ^ var37) + 1043199978) & var24)) & 348885198) - arg19
    return result
def func6(arg28, arg29):
    var30 = 0
    for var31 in range(19):
        if arg28 < var30:
            var30 += arg29 & var31
        else:
            var30 += arg28 ^ var30
    return var30
def func5(arg25, arg26):
    result = arg25 + arg25 | arg26
    return result
def func4(arg20, arg21):
    var22 = 0
    for var23 in xrange(29):
        var22 += 0 + (arg21 | -5)
    return var22
def func1(arg1, arg2):
    if arg1 < arg2:
        var3 = arg2 & arg1
    else:
        var3 = 14134537 + (1954012614 | 1026129378) | -777256032
    var4 = arg2 | arg2
    var5 = arg1 + -560
    var6 = arg1 | 128 ^ arg1 | var5
    var7 = arg1 & var6
    var8 = -1039248519 | var5 | 372739804 ^ var4
    var9 = (arg1 & var5) + var4
    var10 = var8 | arg1
    var11 = var5 - var4
    var12 = (-689 | var4 | var8) - var5
    var13 = (-462743406 - var10 | 850) + var4
    var14 = arg1 - (var11 & var12) + var4
    if var11 < var12:
        var15 = (520 + (var8 + var12)) + var8
    else:
        var15 = (var11 & -958) ^ var13 & var4
    result = ((var9 & var11) ^ var11 ^ (var12 + var4) | var8) + 379
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 16'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 49'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg16, arg17):
    var43 = func3(arg17, arg16)
    var48 = func7(var43, arg16)
    result = (arg16 ^ (arg16 ^ 1995750568) & ((arg16 + (((arg16 | (var48 | -293)) | var48) + -196567502) + var48) ^ -999516652)) | arg17
    return result
def func7(arg44, arg45):
    var46 = 0
    for var47 in range(7):
        var46 += arg45 - -4
    return var46
def func3(arg18, arg19):
    var24 = func4(arg18, arg19)
    var27 = func5(var24, arg19)
    var32 = func6(arg19, var27)
    var33 = arg19 + (-593225779 + arg19) & var24
    var34 = (arg19 ^ (var27 ^ var24)) | var32
    var35 = var27 ^ ((var34 + var32) - -639204196)
    var36 = var24 & var33
    var37 = (var34 + var36 - var27) - arg18
    if var33 < var37:
        var38 = var35 & var33 ^ (var27 | arg19)
    else:
        var38 = var27 | var24
    var39 = var34 & var33
    var40 = (arg18 + -865513816 | var27) | var37
    var41 = var33 & var40 | arg19 - -262385707
    var42 = var27 ^ (arg18 | var36) - arg18
    result = (832 & ((var36 + var32 - (var32 | var37)) & (var36 + ((var39 ^ var37) + 1043199978) & var24)) & 348885198) - arg19
    return result
def func6(arg28, arg29):
    var30 = 0
    for var31 in range(19):
        if arg28 < var30:
            var30 += arg29 & var31
        else:
            var30 += arg28 ^ var30
    return var30
def func5(arg25, arg26):
    result = arg25 + arg25 | arg26
    return result
def func4(arg20, arg21):
    var22 = 0
    for var23 in xrange(29):
        var22 += 0 + (arg21 | -5)
    return var22
def func1(arg1, arg2):
    if arg1 < arg2:
        var3 = arg2 & arg1
    else:
        var3 = 14134537 + (1954012614 | 1026129378) | -777256032
    var4 = arg2 | arg2
    var5 = arg1 + -560
    var6 = arg1 | 128 ^ arg1 | var5
    var7 = arg1 & var6
    var8 = -1039248519 | var5 | 372739804 ^ var4
    var9 = (arg1 & var5) + var4
    var10 = var8 | arg1
    var11 = var5 - var4
    var12 = (-689 | var4 | var8) - var5
    var13 = (-462743406 - var10 | 850) + var4
    var14 = arg1 - (var11 & var12) + var4
    if var11 < var12:
        var15 = (520 + (var8 + var12)) + var8
    else:
        var15 = (var11 & -958) ^ var13 & var4
    result = ((var9 & var11) ^ var11 ^ (var12 + var4) | var8) + 379
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 16'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 49'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg16, arg17):
    var43 = func3(arg17, arg16)
    var48 = func7(var43, arg16)
    result = (arg16 ^ (arg16 ^ 1995750568) & ((arg16 + (((arg16 | (var48 | -293)) | var48) + -196567502) + var48) ^ -999516652)) | arg17
    return result
def func7(arg44, arg45):
    var46 = 0
    for var47 in range(7):
        var46 += arg45 - -4
    return var46
def func3(arg18, arg19):
    var24 = func4(arg18, arg19)
    var27 = func5(var24, arg19)
    var32 = func6(arg19, var27)
    var33 = arg19 + (-593225779 + arg19) & var24
    var34 = (arg19 ^ (var27 ^ var24)) | var32
    var35 = var27 ^ ((var34 + var32) - -639204196)
    var36 = var24 & var33
    var37 = (var34 + var36 - var27) - arg18
    if var33 < var37:
        var38 = var35 & var33 ^ (var27 | arg19)
    else:
        var38 = var27 | var24
    var39 = var34 & var33
    var40 = (arg18 + -865513816 | var27) | var37
    var41 = var33 & var40 | arg19 - -262385707
    var42 = var27 ^ (arg18 | var36) - arg18
    result = (832 & ((var36 + var32 - (var32 | var37)) & (var36 + ((var39 ^ var37) + 1043199978) & var24)) & 348885198) - arg19
    return result
def func6(arg28, arg29):
    var30 = 0
    for var31 in range(19):
        if arg28 < var30:
            var30 += arg29 & var31
        else:
            var30 += arg28 ^ var30
    return var30
def func5(arg25, arg26):
    result = arg25 + arg25 | arg26
    return result
def func4(arg20, arg21):
    var22 = 0
    for var23 in xrange(29):
        var22 += 0 + (arg21 | -5)
    return var22
def func1(arg1, arg2):
    if arg1 < arg2:
        var3 = arg2 & arg1
    else:
        var3 = 14134537 + (1954012614 | 1026129378) | -777256032
    var4 = arg2 | arg2
    var5 = arg1 + -560
    var6 = arg1 | 128 ^ arg1 | var5
    var7 = arg1 & var6
    var8 = -1039248519 | var5 | 372739804 ^ var4
    var9 = (arg1 & var5) + var4
    var10 = var8 | arg1
    var11 = var5 - var4
    var12 = (-689 | var4 | var8) - var5
    var13 = (-462743406 - var10 | 850) + var4
    var14 = arg1 - (var11 & var12) + var4
    if var11 < var12:
        var15 = (520 + (var8 + var12)) + var8
    else:
        var15 = (var11 & -958) ^ var13 & var4
    result = ((var9 & var11) ^ var11 ^ (var12 + var4) | var8) + 379
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 16'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 49'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg16, arg17):
    var43 = func3(arg17, arg16)
    var48 = func7(var43, arg16)
    result = (arg16 ^ (arg16 ^ 1995750568) & ((arg16 + (((arg16 | (var48 | -293)) | var48) + -196567502) + var48) ^ -999516652)) | arg17
    return result
def func7(arg44, arg45):
    var46 = 0
    for var47 in range(7):
        var46 += arg45 - -4
    return var46
def func3(arg18, arg19):
    var24 = func4(arg18, arg19)
    var27 = func5(var24, arg19)
    var32 = func6(arg19, var27)
    var33 = arg19 + (-593225779 + arg19) & var24
    var34 = (arg19 ^ (var27 ^ var24)) | var32
    var35 = var27 ^ ((var34 + var32) - -639204196)
    var36 = var24 & var33
    var37 = (var34 + var36 - var27) - arg18
    if var33 < var37:
        var38 = var35 & var33 ^ (var27 | arg19)
    else:
        var38 = var27 | var24
    var39 = var34 & var33
    var40 = (arg18 + -865513816 | var27) | var37
    var41 = var33 & var40 | arg19 - -262385707
    var42 = var27 ^ (arg18 | var36) - arg18
    result = (832 & ((var36 + var32 - (var32 | var37)) & (var36 + ((var39 ^ var37) + 1043199978) & var24)) & 348885198) - arg19
    return result
def func6(arg28, arg29):
    var30 = 0
    for var31 in range(19):
        if arg28 < var30:
            var30 += arg29 & var31
        else:
            var30 += arg28 ^ var30
    return var30
def func5(arg25, arg26):
    result = arg25 + arg25 | arg26
    return result
def func4(arg20, arg21):
    var22 = 0
    for var23 in xrange(29):
        var22 += 0 + (arg21 | -5)
    return var22
def func1(arg1, arg2):
    if arg1 < arg2:
        var3 = arg2 & arg1
    else:
        var3 = 14134537 + (1954012614 | 1026129378) | -777256032
    var4 = arg2 | arg2
    var5 = arg1 + -560
    var6 = arg1 | 128 ^ arg1 | var5
    var7 = arg1 & var6
    var8 = -1039248519 | var5 | 372739804 ^ var4
    var9 = (arg1 & var5) + var4
    var10 = var8 | arg1
    var11 = var5 - var4
    var12 = (-689 | var4 | var8) - var5
    var13 = (-462743406 - var10 | 850) + var4
    var14 = arg1 - (var11 & var12) + var4
    if var11 < var12:
        var15 = (520 + (var8 + var12)) + var8
    else:
        var15 = (var11 & -958) ^ var13 & var4
    result = ((var9 & var11) ^ var11 ^ (var12 + var4) | var8) + 379
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 16'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 49'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg16, arg17):
    var43 = func3(arg17, arg16)
    var48 = func7(var43, arg16)
    result = (arg16 ^ (arg16 ^ 1995750568) & ((arg16 + (((arg16 | (var48 | -293)) | var48) + -196567502) + var48) ^ -999516652)) | arg17
    return result
def func7(arg44, arg45):
    var46 = 0
    for var47 in range(7):
        var46 += arg45 - -4
    return var46
def func3(arg18, arg19):
    var24 = func4(arg18, arg19)
    var27 = func5(var24, arg19)
    var32 = func6(arg19, var27)
    var33 = arg19 + (-593225779 + arg19) & var24
    var34 = (arg19 ^ (var27 ^ var24)) | var32
    var35 = var27 ^ ((var34 + var32) - -639204196)
    var36 = var24 & var33
    var37 = (var34 + var36 - var27) - arg18
    if var33 < var37:
        var38 = var35 & var33 ^ (var27 | arg19)
    else:
        var38 = var27 | var24
    var39 = var34 & var33
    var40 = (arg18 + -865513816 | var27) | var37
    var41 = var33 & var40 | arg19 - -262385707
    var42 = var27 ^ (arg18 | var36) - arg18
    result = (832 & ((var36 + var32 - (var32 | var37)) & (var36 + ((var39 ^ var37) + 1043199978) & var24)) & 348885198) - arg19
    return result
def func6(arg28, arg29):
    var30 = 0
    for var31 in range(19):
        if arg28 < var30:
            var30 += arg29 & var31
        else:
            var30 += arg28 ^ var30
    return var30
def func5(arg25, arg26):
    result = arg25 + arg25 | arg26
    return result
def func4(arg20, arg21):
    var22 = 0
    for var23 in xrange(29):
        var22 += 0 + (arg21 | -5)
    return var22
def func1(arg1, arg2):
    if arg1 < arg2:
        var3 = arg2 & arg1
    else:
        var3 = 14134537 + (1954012614 | 1026129378) | -777256032
    var4 = arg2 | arg2
    var5 = arg1 + -560
    var6 = arg1 | 128 ^ arg1 | var5
    var7 = arg1 & var6
    var8 = -1039248519 | var5 | 372739804 ^ var4
    var9 = (arg1 & var5) + var4
    var10 = var8 | arg1
    var11 = var5 - var4
    var12 = (-689 | var4 | var8) - var5
    var13 = (-462743406 - var10 | 850) + var4
    var14 = arg1 - (var11 & var12) + var4
    if var11 < var12:
        var15 = (520 + (var8 + var12)) + var8
    else:
        var15 = (var11 & -958) ^ var13 & var4
    result = ((var9 & var11) ^ var11 ^ (var12 + var4) | var8) + 379
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 16'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 49'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg16, arg17):
    var43 = func3(arg17, arg16)
    var48 = func7(var43, arg16)
    result = (arg16 ^ (arg16 ^ 1995750568) & ((arg16 + (((arg16 | (var48 | -293)) | var48) + -196567502) + var48) ^ -999516652)) | arg17
    return result
def func7(arg44, arg45):
    var46 = 0
    for var47 in range(7):
        var46 += arg45 - -4
    return var46
def func3(arg18, arg19):
    var24 = func4(arg18, arg19)
    var27 = func5(var24, arg19)
    var32 = func6(arg19, var27)
    var33 = arg19 + (-593225779 + arg19) & var24
    var34 = (arg19 ^ (var27 ^ var24)) | var32
    var35 = var27 ^ ((var34 + var32) - -639204196)
    var36 = var24 & var33
    var37 = (var34 + var36 - var27) - arg18
    if var33 < var37:
        var38 = var35 & var33 ^ (var27 | arg19)
    else:
        var38 = var27 | var24
    var39 = var34 & var33
    var40 = (arg18 + -865513816 | var27) | var37
    var41 = var33 & var40 | arg19 - -262385707
    var42 = var27 ^ (arg18 | var36) - arg18
    result = (832 & ((var36 + var32 - (var32 | var37)) & (var36 + ((var39 ^ var37) + 1043199978) & var24)) & 348885198) - arg19
    return result
def func6(arg28, arg29):
    var30 = 0
    for var31 in range(19):
        if arg28 < var30:
            var30 += arg29 & var31
        else:
            var30 += arg28 ^ var30
    return var30
def func5(arg25, arg26):
    result = arg25 + arg25 | arg26
    return result
def func4(arg20, arg21):
    var22 = 0
    for var23 in xrange(29):
        var22 += 0 + (arg21 | -5)
    return var22
def func1(arg1, arg2):
    if arg1 < arg2:
        var3 = arg2 & arg1
    else:
        var3 = 14134537 + (1954012614 | 1026129378) | -777256032
    var4 = arg2 | arg2
    var5 = arg1 + -560
    var6 = arg1 | 128 ^ arg1 | var5
    var7 = arg1 & var6
    var8 = -1039248519 | var5 | 372739804 ^ var4
    var9 = (arg1 & var5) + var4
    var10 = var8 | arg1
    var11 = var5 - var4
    var12 = (-689 | var4 | var8) - var5
    var13 = (-462743406 - var10 | 850) + var4
    var14 = arg1 - (var11 & var12) + var4
    if var11 < var12:
        var15 = (520 + (var8 + var12)) + var8
    else:
        var15 = (var11 & -958) ^ var13 & var4
    result = ((var9 & var11) ^ var11 ^ (var12 + var4) | var8) + 379
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 16'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 49'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg16, arg17):
    var43 = func3(arg17, arg16)
    var48 = func7(var43, arg16)
    result = (arg16 ^ (arg16 ^ 1995750568) & ((arg16 + (((arg16 | (var48 | -293)) | var48) + -196567502) + var48) ^ -999516652)) | arg17
    return result
def func7(arg44, arg45):
    var46 = 0
    for var47 in range(7):
        var46 += arg45 - -4
    return var46
def func3(arg18, arg19):
    var24 = func4(arg18, arg19)
    var27 = func5(var24, arg19)
    var32 = func6(arg19, var27)
    var33 = arg19 + (-593225779 + arg19) & var24
    var34 = (arg19 ^ (var27 ^ var24)) | var32
    var35 = var27 ^ ((var34 + var32) - -639204196)
    var36 = var24 & var33
    var37 = (var34 + var36 - var27) - arg18
    if var33 < var37:
        var38 = var35 & var33 ^ (var27 | arg19)
    else:
        var38 = var27 | var24
    var39 = var34 & var33
    var40 = (arg18 + -865513816 | var27) | var37
    var41 = var33 & var40 | arg19 - -262385707
    var42 = var27 ^ (arg18 | var36) - arg18
    result = (832 & ((var36 + var32 - (var32 | var37)) & (var36 + ((var39 ^ var37) + 1043199978) & var24)) & 348885198) - arg19
    return result
def func6(arg28, arg29):
    var30 = 0
    for var31 in range(19):
        if arg28 < var30:
            var30 += arg29 & var31
        else:
            var30 += arg28 ^ var30
    return var30
def func5(arg25, arg26):
    result = arg25 + arg25 | arg26
    return result
def func4(arg20, arg21):
    var22 = 0
    for var23 in xrange(29):
        var22 += 0 + (arg21 | -5)
    return var22
def func1(arg1, arg2):
    if arg1 < arg2:
        var3 = arg2 & arg1
    else:
        var3 = 14134537 + (1954012614 | 1026129378) | -777256032
    var4 = arg2 | arg2
    var5 = arg1 + -560
    var6 = arg1 | 128 ^ arg1 | var5
    var7 = arg1 & var6
    var8 = -1039248519 | var5 | 372739804 ^ var4
    var9 = (arg1 & var5) + var4
    var10 = var8 | arg1
    var11 = var5 - var4
    var12 = (-689 | var4 | var8) - var5
    var13 = (-462743406 - var10 | 850) + var4
    var14 = arg1 - (var11 & var12) + var4
    if var11 < var12:
        var15 = (520 + (var8 + var12)) + var8
    else:
        var15 = (var11 & -958) ^ var13 & var4
    result = ((var9 & var11) ^ var11 ^ (var12 + var4) | var8) + 379
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 16'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 49'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg16, arg17):
    var43 = func3(arg17, arg16)
    var48 = func7(var43, arg16)
    result = (arg16 ^ (arg16 ^ 1995750568) & ((arg16 + (((arg16 | (var48 | -293)) | var48) + -196567502) + var48) ^ -999516652)) | arg17
    return result
def func7(arg44, arg45):
    var46 = 0
    for var47 in range(7):
        var46 += arg45 - -4
    return var46
def func3(arg18, arg19):
    var24 = func4(arg18, arg19)
    var27 = func5(var24, arg19)
    var32 = func6(arg19, var27)
    var33 = arg19 + (-593225779 + arg19) & var24
    var34 = (arg19 ^ (var27 ^ var24)) | var32
    var35 = var27 ^ ((var34 + var32) - -639204196)
    var36 = var24 & var33
    var37 = (var34 + var36 - var27) - arg18
    if var33 < var37:
        var38 = var35 & var33 ^ (var27 | arg19)
    else:
        var38 = var27 | var24
    var39 = var34 & var33
    var40 = (arg18 + -865513816 | var27) | var37
    var41 = var33 & var40 | arg19 - -262385707
    var42 = var27 ^ (arg18 | var36) - arg18
    result = (832 & ((var36 + var32 - (var32 | var37)) & (var36 + ((var39 ^ var37) + 1043199978) & var24)) & 348885198) - arg19
    return result
def func6(arg28, arg29):
    var30 = 0
    for var31 in range(19):
        if arg28 < var30:
            var30 += arg29 & var31
        else:
            var30 += arg28 ^ var30
    return var30
def func5(arg25, arg26):
    result = arg25 + arg25 | arg26
    return result
def func4(arg20, arg21):
    var22 = 0
    for var23 in xrange(29):
        var22 += 0 + (arg21 | -5)
    return var22
def func1(arg1, arg2):
    if arg1 < arg2:
        var3 = arg2 & arg1
    else:
        var3 = 14134537 + (1954012614 | 1026129378) | -777256032
    var4 = arg2 | arg2
    var5 = arg1 + -560
    var6 = arg1 | 128 ^ arg1 | var5
    var7 = arg1 & var6
    var8 = -1039248519 | var5 | 372739804 ^ var4
    var9 = (arg1 & var5) + var4
    var10 = var8 | arg1
    var11 = var5 - var4
    var12 = (-689 | var4 | var8) - var5
    var13 = (-462743406 - var10 | 850) + var4
    var14 = arg1 - (var11 & var12) + var4
    if var11 < var12:
        var15 = (520 + (var8 + var12)) + var8
    else:
        var15 = (var11 & -958) ^ var13 & var4
    result = ((var9 & var11) ^ var11 ^ (var12 + var4) | var8) + 379
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 16'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 49'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg16, arg17):
    var43 = func3(arg17, arg16)
    var48 = func7(var43, arg16)
    result = (arg16 ^ (arg16 ^ 1995750568) & ((arg16 + (((arg16 | (var48 | -293)) | var48) + -196567502) + var48) ^ -999516652)) | arg17
    return result
def func7(arg44, arg45):
    var46 = 0
    for var47 in range(7):
        var46 += arg45 - -4
    return var46
def func3(arg18, arg19):
    var24 = func4(arg18, arg19)
    var27 = func5(var24, arg19)
    var32 = func6(arg19, var27)
    var33 = arg19 + (-593225779 + arg19) & var24
    var34 = (arg19 ^ (var27 ^ var24)) | var32
    var35 = var27 ^ ((var34 + var32) - -639204196)
    var36 = var24 & var33
    var37 = (var34 + var36 - var27) - arg18
    if var33 < var37:
        var38 = var35 & var33 ^ (var27 | arg19)
    else:
        var38 = var27 | var24
    var39 = var34 & var33
    var40 = (arg18 + -865513816 | var27) | var37
    var41 = var33 & var40 | arg19 - -262385707
    var42 = var27 ^ (arg18 | var36) - arg18
    result = (832 & ((var36 + var32 - (var32 | var37)) & (var36 + ((var39 ^ var37) + 1043199978) & var24)) & 348885198) - arg19
    return result
def func6(arg28, arg29):
    var30 = 0
    for var31 in range(19):
        if arg28 < var30:
            var30 += arg29 & var31
        else:
            var30 += arg28 ^ var30
    return var30
def func5(arg25, arg26):
    result = arg25 + arg25 | arg26
    return result
def func4(arg20, arg21):
    var22 = 0
    for var23 in xrange(29):
        var22 += 0 + (arg21 | -5)
    return var22
def func1(arg1, arg2):
    if arg1 < arg2:
        var3 = arg2 & arg1
    else:
        var3 = 14134537 + (1954012614 | 1026129378) | -777256032
    var4 = arg2 | arg2
    var5 = arg1 + -560
    var6 = arg1 | 128 ^ arg1 | var5
    var7 = arg1 & var6
    var8 = -1039248519 | var5 | 372739804 ^ var4
    var9 = (arg1 & var5) + var4
    var10 = var8 | arg1
    var11 = var5 - var4
    var12 = (-689 | var4 | var8) - var5
    var13 = (-462743406 - var10 | 850) + var4
    var14 = arg1 - (var11 & var12) + var4
    if var11 < var12:
        var15 = (520 + (var8 + var12)) + var8
    else:
        var15 = (var11 & -958) ^ var13 & var4
    result = ((var9 & var11) ^ var11 ^ (var12 + var4) | var8) + 379
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 16'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 49'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg16, arg17):
    var43 = func3(arg17, arg16)
    var48 = func7(var43, arg16)
    result = (arg16 ^ (arg16 ^ 1995750568) & ((arg16 + (((arg16 | (var48 | -293)) | var48) + -196567502) + var48) ^ -999516652)) | arg17
    return result
def func7(arg44, arg45):
    var46 = 0
    for var47 in range(7):
        var46 += arg45 - -4
    return var46
def func3(arg18, arg19):
    var24 = func4(arg18, arg19)
    var27 = func5(var24, arg19)
    var32 = func6(arg19, var27)
    var33 = arg19 + (-593225779 + arg19) & var24
    var34 = (arg19 ^ (var27 ^ var24)) | var32
    var35 = var27 ^ ((var34 + var32) - -639204196)
    var36 = var24 & var33
    var37 = (var34 + var36 - var27) - arg18
    if var33 < var37:
        var38 = var35 & var33 ^ (var27 | arg19)
    else:
        var38 = var27 | var24
    var39 = var34 & var33
    var40 = (arg18 + -865513816 | var27) | var37
    var41 = var33 & var40 | arg19 - -262385707
    var42 = var27 ^ (arg18 | var36) - arg18
    result = (832 & ((var36 + var32 - (var32 | var37)) & (var36 + ((var39 ^ var37) + 1043199978) & var24)) & 348885198) - arg19
    return result
def func6(arg28, arg29):
    var30 = 0
    for var31 in range(19):
        if arg28 < var30:
            var30 += arg29 & var31
        else:
            var30 += arg28 ^ var30
    return var30
def func5(arg25, arg26):
    result = arg25 + arg25 | arg26
    return result
def func4(arg20, arg21):
    var22 = 0
    for var23 in xrange(29):
        var22 += 0 + (arg21 | -5)
    return var22
def func1(arg1, arg2):
    if arg1 < arg2:
        var3 = arg2 & arg1
    else:
        var3 = 14134537 + (1954012614 | 1026129378) | -777256032
    var4 = arg2 | arg2
    var5 = arg1 + -560
    var6 = arg1 | 128 ^ arg1 | var5
    var7 = arg1 & var6
    var8 = -1039248519 | var5 | 372739804 ^ var4
    var9 = (arg1 & var5) + var4
    var10 = var8 | arg1
    var11 = var5 - var4
    var12 = (-689 | var4 | var8) - var5
    var13 = (-462743406 - var10 | 850) + var4
    var14 = arg1 - (var11 & var12) + var4
    if var11 < var12:
        var15 = (520 + (var8 + var12)) + var8
    else:
        var15 = (var11 & -958) ^ var13 & var4
    result = ((var9 & var11) ^ var11 ^ (var12 + var4) | var8) + 379
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 16'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 49'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg16, arg17):
    var43 = func3(arg17, arg16)
    var48 = func7(var43, arg16)
    result = (arg16 ^ (arg16 ^ 1995750568) & ((arg16 + (((arg16 | (var48 | -293)) | var48) + -196567502) + var48) ^ -999516652)) | arg17
    return result
def func7(arg44, arg45):
    var46 = 0
    for var47 in range(7):
        var46 += arg45 - -4
    return var46
def func3(arg18, arg19):
    var24 = func4(arg18, arg19)
    var27 = func5(var24, arg19)
    var32 = func6(arg19, var27)
    var33 = arg19 + (-593225779 + arg19) & var24
    var34 = (arg19 ^ (var27 ^ var24)) | var32
    var35 = var27 ^ ((var34 + var32) - -639204196)
    var36 = var24 & var33
    var37 = (var34 + var36 - var27) - arg18
    if var33 < var37:
        var38 = var35 & var33 ^ (var27 | arg19)
    else:
        var38 = var27 | var24
    var39 = var34 & var33
    var40 = (arg18 + -865513816 | var27) | var37
    var41 = var33 & var40 | arg19 - -262385707
    var42 = var27 ^ (arg18 | var36) - arg18
    result = (832 & ((var36 + var32 - (var32 | var37)) & (var36 + ((var39 ^ var37) + 1043199978) & var24)) & 348885198) - arg19
    return result
def func6(arg28, arg29):
    var30 = 0
    for var31 in range(19):
        if arg28 < var30:
            var30 += arg29 & var31
        else:
            var30 += arg28 ^ var30
    return var30
def func5(arg25, arg26):
    result = arg25 + arg25 | arg26
    return result
def func4(arg20, arg21):
    var22 = 0
    for var23 in xrange(29):
        var22 += 0 + (arg21 | -5)
    return var22
def func1(arg1, arg2):
    if arg1 < arg2:
        var3 = arg2 & arg1
    else:
        var3 = 14134537 + (1954012614 | 1026129378) | -777256032
    var4 = arg2 | arg2
    var5 = arg1 + -560
    var6 = arg1 | 128 ^ arg1 | var5
    var7 = arg1 & var6
    var8 = -1039248519 | var5 | 372739804 ^ var4
    var9 = (arg1 & var5) + var4
    var10 = var8 | arg1
    var11 = var5 - var4
    var12 = (-689 | var4 | var8) - var5
    var13 = (-462743406 - var10 | 850) + var4
    var14 = arg1 - (var11 & var12) + var4
    if var11 < var12:
        var15 = (520 + (var8 + var12)) + var8
    else:
        var15 = (var11 & -958) ^ var13 & var4
    result = ((var9 & var11) ^ var11 ^ (var12 + var4) | var8) + 379
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 16'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 49'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg16, arg17):
    var43 = func3(arg17, arg16)
    var48 = func7(var43, arg16)
    result = (arg16 ^ (arg16 ^ 1995750568) & ((arg16 + (((arg16 | (var48 | -293)) | var48) + -196567502) + var48) ^ -999516652)) | arg17
    return result
def func7(arg44, arg45):
    var46 = 0
    for var47 in range(7):
        var46 += arg45 - -4
    return var46
def func3(arg18, arg19):
    var24 = func4(arg18, arg19)
    var27 = func5(var24, arg19)
    var32 = func6(arg19, var27)
    var33 = arg19 + (-593225779 + arg19) & var24
    var34 = (arg19 ^ (var27 ^ var24)) | var32
    var35 = var27 ^ ((var34 + var32) - -639204196)
    var36 = var24 & var33
    var37 = (var34 + var36 - var27) - arg18
    if var33 < var37:
        var38 = var35 & var33 ^ (var27 | arg19)
    else:
        var38 = var27 | var24
    var39 = var34 & var33
    var40 = (arg18 + -865513816 | var27) | var37
    var41 = var33 & var40 | arg19 - -262385707
    var42 = var27 ^ (arg18 | var36) - arg18
    result = (832 & ((var36 + var32 - (var32 | var37)) & (var36 + ((var39 ^ var37) + 1043199978) & var24)) & 348885198) - arg19
    return result
def func6(arg28, arg29):
    var30 = 0
    for var31 in range(19):
        if arg28 < var30:
            var30 += arg29 & var31
        else:
            var30 += arg28 ^ var30
    return var30
def func5(arg25, arg26):
    result = arg25 + arg25 | arg26
    return result
def func4(arg20, arg21):
    var22 = 0
    for var23 in xrange(29):
        var22 += 0 + (arg21 | -5)
    return var22
def func1(arg1, arg2):
    if arg1 < arg2:
        var3 = arg2 & arg1
    else:
        var3 = 14134537 + (1954012614 | 1026129378) | -777256032
    var4 = arg2 | arg2
    var5 = arg1 + -560
    var6 = arg1 | 128 ^ arg1 | var5
    var7 = arg1 & var6
    var8 = -1039248519 | var5 | 372739804 ^ var4
    var9 = (arg1 & var5) + var4
    var10 = var8 | arg1
    var11 = var5 - var4
    var12 = (-689 | var4 | var8) - var5
    var13 = (-462743406 - var10 | 850) + var4
    var14 = arg1 - (var11 & var12) + var4
    if var11 < var12:
        var15 = (520 + (var8 + var12)) + var8
    else:
        var15 = (var11 & -958) ^ var13 & var4
    result = ((var9 & var11) ^ var11 ^ (var12 + var4) | var8) + 379
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 16'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 49'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg16, arg17):
    var43 = func3(arg17, arg16)
    var48 = func7(var43, arg16)
    result = (arg16 ^ (arg16 ^ 1995750568) & ((arg16 + (((arg16 | (var48 | -293)) | var48) + -196567502) + var48) ^ -999516652)) | arg17
    return result
def func7(arg44, arg45):
    var46 = 0
    for var47 in range(7):
        var46 += arg45 - -4
    return var46
def func3(arg18, arg19):
    var24 = func4(arg18, arg19)
    var27 = func5(var24, arg19)
    var32 = func6(arg19, var27)
    var33 = arg19 + (-593225779 + arg19) & var24
    var34 = (arg19 ^ (var27 ^ var24)) | var32
    var35 = var27 ^ ((var34 + var32) - -639204196)
    var36 = var24 & var33
    var37 = (var34 + var36 - var27) - arg18
    if var33 < var37:
        var38 = var35 & var33 ^ (var27 | arg19)
    else:
        var38 = var27 | var24
    var39 = var34 & var33
    var40 = (arg18 + -865513816 | var27) | var37
    var41 = var33 & var40 | arg19 - -262385707
    var42 = var27 ^ (arg18 | var36) - arg18
    result = (832 & ((var36 + var32 - (var32 | var37)) & (var36 + ((var39 ^ var37) + 1043199978) & var24)) & 348885198) - arg19
    return result
def func6(arg28, arg29):
    var30 = 0
    for var31 in range(19):
        if arg28 < var30:
            var30 += arg29 & var31
        else:
            var30 += arg28 ^ var30
    return var30
def func5(arg25, arg26):
    result = arg25 + arg25 | arg26
    return result
def func4(arg20, arg21):
    var22 = 0
    for var23 in xrange(29):
        var22 += 0 + (arg21 | -5)
    return var22
def func1(arg1, arg2):
    if arg1 < arg2:
        var3 = arg2 & arg1
    else:
        var3 = 14134537 + (1954012614 | 1026129378) | -777256032
    var4 = arg2 | arg2
    var5 = arg1 + -560
    var6 = arg1 | 128 ^ arg1 | var5
    var7 = arg1 & var6
    var8 = -1039248519 | var5 | 372739804 ^ var4
    var9 = (arg1 & var5) + var4
    var10 = var8 | arg1
    var11 = var5 - var4
    var12 = (-689 | var4 | var8) - var5
    var13 = (-462743406 - var10 | 850) + var4
    var14 = arg1 - (var11 & var12) + var4
    if var11 < var12:
        var15 = (520 + (var8 + var12)) + var8
    else:
        var15 = (var11 & -958) ^ var13 & var4
    result = ((var9 & var11) ^ var11 ^ (var12 + var4) | var8) + 379
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 16'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 49'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg16, arg17):
    var43 = func3(arg17, arg16)
    var48 = func7(var43, arg16)
    result = (arg16 ^ (arg16 ^ 1995750568) & ((arg16 + (((arg16 | (var48 | -293)) | var48) + -196567502) + var48) ^ -999516652)) | arg17
    return result
def func7(arg44, arg45):
    var46 = 0
    for var47 in range(7):
        var46 += arg45 - -4
    return var46
def func3(arg18, arg19):
    var24 = func4(arg18, arg19)
    var27 = func5(var24, arg19)
    var32 = func6(arg19, var27)
    var33 = arg19 + (-593225779 + arg19) & var24
    var34 = (arg19 ^ (var27 ^ var24)) | var32
    var35 = var27 ^ ((var34 + var32) - -639204196)
    var36 = var24 & var33
    var37 = (var34 + var36 - var27) - arg18
    if var33 < var37:
        var38 = var35 & var33 ^ (var27 | arg19)
    else:
        var38 = var27 | var24
    var39 = var34 & var33
    var40 = (arg18 + -865513816 | var27) | var37
    var41 = var33 & var40 | arg19 - -262385707
    var42 = var27 ^ (arg18 | var36) - arg18
    result = (832 & ((var36 + var32 - (var32 | var37)) & (var36 + ((var39 ^ var37) + 1043199978) & var24)) & 348885198) - arg19
    return result
def func6(arg28, arg29):
    var30 = 0
    for var31 in range(19):
        if arg28 < var30:
            var30 += arg29 & var31
        else:
            var30 += arg28 ^ var30
    return var30
def func5(arg25, arg26):
    result = arg25 + arg25 | arg26
    return result
def func4(arg20, arg21):
    var22 = 0
    for var23 in xrange(29):
        var22 += 0 + (arg21 | -5)
    return var22
def func1(arg1, arg2):
    if arg1 < arg2:
        var3 = arg2 & arg1
    else:
        var3 = 14134537 + (1954012614 | 1026129378) | -777256032
    var4 = arg2 | arg2
    var5 = arg1 + -560
    var6 = arg1 | 128 ^ arg1 | var5
    var7 = arg1 & var6
    var8 = -1039248519 | var5 | 372739804 ^ var4
    var9 = (arg1 & var5) + var4
    var10 = var8 | arg1
    var11 = var5 - var4
    var12 = (-689 | var4 | var8) - var5
    var13 = (-462743406 - var10 | 850) + var4
    var14 = arg1 - (var11 & var12) + var4
    if var11 < var12:
        var15 = (520 + (var8 + var12)) + var8
    else:
        var15 = (var11 & -958) ^ var13 & var4
    result = ((var9 & var11) ^ var11 ^ (var12 + var4) | var8) + 379
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 16'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 49'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg16, arg17):
    var43 = func3(arg17, arg16)
    var48 = func7(var43, arg16)
    result = (arg16 ^ (arg16 ^ 1995750568) & ((arg16 + (((arg16 | (var48 | -293)) | var48) + -196567502) + var48) ^ -999516652)) | arg17
    return result
def func7(arg44, arg45):
    var46 = 0
    for var47 in range(7):
        var46 += arg45 - -4
    return var46
def func3(arg18, arg19):
    var24 = func4(arg18, arg19)
    var27 = func5(var24, arg19)
    var32 = func6(arg19, var27)
    var33 = arg19 + (-593225779 + arg19) & var24
    var34 = (arg19 ^ (var27 ^ var24)) | var32
    var35 = var27 ^ ((var34 + var32) - -639204196)
    var36 = var24 & var33
    var37 = (var34 + var36 - var27) - arg18
    if var33 < var37:
        var38 = var35 & var33 ^ (var27 | arg19)
    else:
        var38 = var27 | var24
    var39 = var34 & var33
    var40 = (arg18 + -865513816 | var27) | var37
    var41 = var33 & var40 | arg19 - -262385707
    var42 = var27 ^ (arg18 | var36) - arg18
    result = (832 & ((var36 + var32 - (var32 | var37)) & (var36 + ((var39 ^ var37) + 1043199978) & var24)) & 348885198) - arg19
    return result
def func6(arg28, arg29):
    var30 = 0
    for var31 in range(19):
        if arg28 < var30:
            var30 += arg29 & var31
        else:
            var30 += arg28 ^ var30
    return var30
def func5(arg25, arg26):
    result = arg25 + arg25 | arg26
    return result
def func4(arg20, arg21):
    var22 = 0
    for var23 in xrange(29):
        var22 += 0 + (arg21 | -5)
    return var22
def func1(arg1, arg2):
    if arg1 < arg2:
        var3 = arg2 & arg1
    else:
        var3 = 14134537 + (1954012614 | 1026129378) | -777256032
    var4 = arg2 | arg2
    var5 = arg1 + -560
    var6 = arg1 | 128 ^ arg1 | var5
    var7 = arg1 & var6
    var8 = -1039248519 | var5 | 372739804 ^ var4
    var9 = (arg1 & var5) + var4
    var10 = var8 | arg1
    var11 = var5 - var4
    var12 = (-689 | var4 | var8) - var5
    var13 = (-462743406 - var10 | 850) + var4
    var14 = arg1 - (var11 & var12) + var4
    if var11 < var12:
        var15 = (520 + (var8 + var12)) + var8
    else:
        var15 = (var11 & -958) ^ var13 & var4
    result = ((var9 & var11) ^ var11 ^ (var12 + var4) | var8) + 379
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 16'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 49'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg16, arg17):
    var43 = func3(arg17, arg16)
    var48 = func7(var43, arg16)
    result = (arg16 ^ (arg16 ^ 1995750568) & ((arg16 + (((arg16 | (var48 | -293)) | var48) + -196567502) + var48) ^ -999516652)) | arg17
    return result
def func7(arg44, arg45):
    var46 = 0
    for var47 in range(7):
        var46 += arg45 - -4
    return var46
def func3(arg18, arg19):
    var24 = func4(arg18, arg19)
    var27 = func5(var24, arg19)
    var32 = func6(arg19, var27)
    var33 = arg19 + (-593225779 + arg19) & var24
    var34 = (arg19 ^ (var27 ^ var24)) | var32
    var35 = var27 ^ ((var34 + var32) - -639204196)
    var36 = var24 & var33
    var37 = (var34 + var36 - var27) - arg18
    if var33 < var37:
        var38 = var35 & var33 ^ (var27 | arg19)
    else:
        var38 = var27 | var24
    var39 = var34 & var33
    var40 = (arg18 + -865513816 | var27) | var37
    var41 = var33 & var40 | arg19 - -262385707
    var42 = var27 ^ (arg18 | var36) - arg18
    result = (832 & ((var36 + var32 - (var32 | var37)) & (var36 + ((var39 ^ var37) + 1043199978) & var24)) & 348885198) - arg19
    return result
def func6(arg28, arg29):
    var30 = 0
    for var31 in range(19):
        if arg28 < var30:
            var30 += arg29 & var31
        else:
            var30 += arg28 ^ var30
    return var30
def func5(arg25, arg26):
    result = arg25 + arg25 | arg26
    return result
def func4(arg20, arg21):
    var22 = 0
    for var23 in xrange(29):
        var22 += 0 + (arg21 | -5)
    return var22
def func1(arg1, arg2):
    if arg1 < arg2:
        var3 = arg2 & arg1
    else:
        var3 = 14134537 + (1954012614 | 1026129378) | -777256032
    var4 = arg2 | arg2
    var5 = arg1 + -560
    var6 = arg1 | 128 ^ arg1 | var5
    var7 = arg1 & var6
    var8 = -1039248519 | var5 | 372739804 ^ var4
    var9 = (arg1 & var5) + var4
    var10 = var8 | arg1
    var11 = var5 - var4
    var12 = (-689 | var4 | var8) - var5
    var13 = (-462743406 - var10 | 850) + var4
    var14 = arg1 - (var11 & var12) + var4
    if var11 < var12:
        var15 = (520 + (var8 + var12)) + var8
    else:
        var15 = (var11 & -958) ^ var13 & var4
    result = ((var9 & var11) ^ var11 ^ (var12 + var4) | var8) + 379
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 16'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 49'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg16, arg17):
    var43 = func3(arg17, arg16)
    var48 = func7(var43, arg16)
    result = (arg16 ^ (arg16 ^ 1995750568) & ((arg16 + (((arg16 | (var48 | -293)) | var48) + -196567502) + var48) ^ -999516652)) | arg17
    return result
def func7(arg44, arg45):
    var46 = 0
    for var47 in range(7):
        var46 += arg45 - -4
    return var46
def func3(arg18, arg19):
    var24 = func4(arg18, arg19)
    var27 = func5(var24, arg19)
    var32 = func6(arg19, var27)
    var33 = arg19 + (-593225779 + arg19) & var24
    var34 = (arg19 ^ (var27 ^ var24)) | var32
    var35 = var27 ^ ((var34 + var32) - -639204196)
    var36 = var24 & var33
    var37 = (var34 + var36 - var27) - arg18
    if var33 < var37:
        var38 = var35 & var33 ^ (var27 | arg19)
    else:
        var38 = var27 | var24
    var39 = var34 & var33
    var40 = (arg18 + -865513816 | var27) | var37
    var41 = var33 & var40 | arg19 - -262385707
    var42 = var27 ^ (arg18 | var36) - arg18
    result = (832 & ((var36 + var32 - (var32 | var37)) & (var36 + ((var39 ^ var37) + 1043199978) & var24)) & 348885198) - arg19
    return result
def func6(arg28, arg29):
    var30 = 0
    for var31 in range(19):
        if arg28 < var30:
            var30 += arg29 & var31
        else:
            var30 += arg28 ^ var30
    return var30
def func5(arg25, arg26):
    result = arg25 + arg25 | arg26
    return result
def func4(arg20, arg21):
    var22 = 0
    for var23 in xrange(29):
        var22 += 0 + (arg21 | -5)
    return var22
def func1(arg1, arg2):
    if arg1 < arg2:
        var3 = arg2 & arg1
    else:
        var3 = 14134537 + (1954012614 | 1026129378) | -777256032
    var4 = arg2 | arg2
    var5 = arg1 + -560
    var6 = arg1 | 128 ^ arg1 | var5
    var7 = arg1 & var6
    var8 = -1039248519 | var5 | 372739804 ^ var4
    var9 = (arg1 & var5) + var4
    var10 = var8 | arg1
    var11 = var5 - var4
    var12 = (-689 | var4 | var8) - var5
    var13 = (-462743406 - var10 | 850) + var4
    var14 = arg1 - (var11 & var12) + var4
    if var11 < var12:
        var15 = (520 + (var8 + var12)) + var8
    else:
        var15 = (var11 & -958) ^ var13 & var4
    result = ((var9 & var11) ^ var11 ^ (var12 + var4) | var8) + 379
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 16'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 49'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg16, arg17):
    var43 = func3(arg17, arg16)
    var48 = func7(var43, arg16)
    result = (arg16 ^ (arg16 ^ 1995750568) & ((arg16 + (((arg16 | (var48 | -293)) | var48) + -196567502) + var48) ^ -999516652)) | arg17
    return result
def func7(arg44, arg45):
    var46 = 0
    for var47 in range(7):
        var46 += arg45 - -4
    return var46
def func3(arg18, arg19):
    var24 = func4(arg18, arg19)
    var27 = func5(var24, arg19)
    var32 = func6(arg19, var27)
    var33 = arg19 + (-593225779 + arg19) & var24
    var34 = (arg19 ^ (var27 ^ var24)) | var32
    var35 = var27 ^ ((var34 + var32) - -639204196)
    var36 = var24 & var33
    var37 = (var34 + var36 - var27) - arg18
    if var33 < var37:
        var38 = var35 & var33 ^ (var27 | arg19)
    else:
        var38 = var27 | var24
    var39 = var34 & var33
    var40 = (arg18 + -865513816 | var27) | var37
    var41 = var33 & var40 | arg19 - -262385707
    var42 = var27 ^ (arg18 | var36) - arg18
    result = (832 & ((var36 + var32 - (var32 | var37)) & (var36 + ((var39 ^ var37) + 1043199978) & var24)) & 348885198) - arg19
    return result
def func6(arg28, arg29):
    var30 = 0
    for var31 in range(19):
        if arg28 < var30:
            var30 += arg29 & var31
        else:
            var30 += arg28 ^ var30
    return var30
def func5(arg25, arg26):
    result = arg25 + arg25 | arg26
    return result
def func4(arg20, arg21):
    var22 = 0
    for var23 in xrange(29):
        var22 += 0 + (arg21 | -5)
    return var22
def func1(arg1, arg2):
    if arg1 < arg2:
        var3 = arg2 & arg1
    else:
        var3 = 14134537 + (1954012614 | 1026129378) | -777256032
    var4 = arg2 | arg2
    var5 = arg1 + -560
    var6 = arg1 | 128 ^ arg1 | var5
    var7 = arg1 & var6
    var8 = -1039248519 | var5 | 372739804 ^ var4
    var9 = (arg1 & var5) + var4
    var10 = var8 | arg1
    var11 = var5 - var4
    var12 = (-689 | var4 | var8) - var5
    var13 = (-462743406 - var10 | 850) + var4
    var14 = arg1 - (var11 & var12) + var4
    if var11 < var12:
        var15 = (520 + (var8 + var12)) + var8
    else:
        var15 = (var11 & -958) ^ var13 & var4
    result = ((var9 & var11) ^ var11 ^ (var12 + var4) | var8) + 379
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 16'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 49'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg16, arg17):
    var43 = func3(arg17, arg16)
    var48 = func7(var43, arg16)
    result = (arg16 ^ (arg16 ^ 1995750568) & ((arg16 + (((arg16 | (var48 | -293)) | var48) + -196567502) + var48) ^ -999516652)) | arg17
    return result
def func7(arg44, arg45):
    var46 = 0
    for var47 in range(7):
        var46 += arg45 - -4
    return var46
def func3(arg18, arg19):
    var24 = func4(arg18, arg19)
    var27 = func5(var24, arg19)
    var32 = func6(arg19, var27)
    var33 = arg19 + (-593225779 + arg19) & var24
    var34 = (arg19 ^ (var27 ^ var24)) | var32
    var35 = var27 ^ ((var34 + var32) - -639204196)
    var36 = var24 & var33
    var37 = (var34 + var36 - var27) - arg18
    if var33 < var37:
        var38 = var35 & var33 ^ (var27 | arg19)
    else:
        var38 = var27 | var24
    var39 = var34 & var33
    var40 = (arg18 + -865513816 | var27) | var37
    var41 = var33 & var40 | arg19 - -262385707
    var42 = var27 ^ (arg18 | var36) - arg18
    result = (832 & ((var36 + var32 - (var32 | var37)) & (var36 + ((var39 ^ var37) + 1043199978) & var24)) & 348885198) - arg19
    return result
def func6(arg28, arg29):
    var30 = 0
    for var31 in range(19):
        if arg28 < var30:
            var30 += arg29 & var31
        else:
            var30 += arg28 ^ var30
    return var30
def func5(arg25, arg26):
    result = arg25 + arg25 | arg26
    return result
def func4(arg20, arg21):
    var22 = 0
    for var23 in xrange(29):
        var22 += 0 + (arg21 | -5)
    return var22
def func1(arg1, arg2):
    if arg1 < arg2:
        var3 = arg2 & arg1
    else:
        var3 = 14134537 + (1954012614 | 1026129378) | -777256032
    var4 = arg2 | arg2
    var5 = arg1 + -560
    var6 = arg1 | 128 ^ arg1 | var5
    var7 = arg1 & var6
    var8 = -1039248519 | var5 | 372739804 ^ var4
    var9 = (arg1 & var5) + var4
    var10 = var8 | arg1
    var11 = var5 - var4
    var12 = (-689 | var4 | var8) - var5
    var13 = (-462743406 - var10 | 850) + var4
    var14 = arg1 - (var11 & var12) + var4
    if var11 < var12:
        var15 = (520 + (var8 + var12)) + var8
    else:
        var15 = (var11 & -958) ^ var13 & var4
    result = ((var9 & var11) ^ var11 ^ (var12 + var4) | var8) + 379
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 16'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 49'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,
